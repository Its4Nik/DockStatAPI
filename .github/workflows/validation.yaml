name: "CI/CD Pipeline"

on:
  push:
  release:
    types: [published]

jobs:
  validation:
    name: "Code Validation & Tests"
    runs-on: ubuntu-24.04
    permissions:
      actions: read
      contents: read
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Create varaibles.json
        run: npm run local-env-file

      - name: Run code formatting
        run: npm run prettier

      - name: Run linter
        run: npm run lint

      - name: Build project
        run: npm run build:mini

      - name: Audit packages
        run: npm audit --audit-level=high

      - name: Run tests
        run: npm run test:silent

  security-analysis:
    name: "Security Analysis"
    runs-on: ubuntu-24.04
    needs: validation
    permissions:
      security-events: write
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended
          config: |
            query-filter:
              - exclude:
                  tags: /cwe-200/

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  container-scanning:
    name: "Container Security"
    runs-on: ubuntu-24.04
    needs: validation
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b $HOME/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Build Docker image
        run: docker build . --file docker/Dockerfile-base --tag localbuild/testimage:latest

      - name: Run vulnerability scan
        run: grype -o sarif localbuild/testimage:latest > results.sarif

      - name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./results.sarif

  build-test:
    name: "Docker Build Test"
    runs-on: ubuntu-24.04
    needs: validation
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile-base
          platforms: linux/amd64,linux/arm64
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  todo-management:
    name: "TODO Issue Management"
    runs-on: ubuntu-24.04
    needs: validation
    permissions:
      contents: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Process TODOs
        uses: alstr/todo-to-issue-action@v5
        with:
          INSERT_ISSUE_URLS: "true"

      - name: Commit changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if [[ $(git status --porcelain) ]]; then
            git commit -m "Automatically process TODOs [skip ci]"
            git push
          fi

  deployment:
    name: "Docker Deployment"
    runs-on: ubuntu-24.04
    needs: [security-analysis, container-scanning, build-test]
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        include:
          - type: dev
            # Only enable when pushing to the dev branch
            enabled: ${{ github.ref_name == 'dev' }}
          - type: pre-release
            # Only enable when a release event is published and it's a prerelease
            enabled: ${{ github.event_name == 'release' && github.event.release.prerelease }}
          - type: release
            # Only enable when a release event is published and it's NOT a prerelease
            enabled: ${{ github.event_name == 'release' && !github.event.release.prerelease }}
    steps:
      - name: Exit early if deployment is not enabled
        if: ${{ !matrix.enabled }}
        run: |
          echo "Skipping deployment for matrix type '${{ matrix.type }}' because conditions are not met."
          exit 0

      - name: Checkout repository
        if: ${{ matrix.enabled }}
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: ${{ matrix.enabled }}
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: ${{ matrix.enabled }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine tags
        if: ${{ matrix.enabled }}
        id: tags
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ matrix.type == 'dev' && 'nightly' || matrix.type == 'pre-release' && 'pre' || matrix.type == 'release' && 'latest' }}

      - name: Build and push
        if: ${{ matrix.enabled }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile-dev
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.tags.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
