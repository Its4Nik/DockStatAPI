name: "Build test docker image"

on:
  workflow_run:
    workflows:
      - "Anchore Grype Vulnerability Scan"
      - "CodeQL Advanced"
    types:
      - completed

permissions:
  packages: write
  contents: read

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow dependencies
        run: |
          for i in {1..10}; do
            if [[ "${{ env.anchore_complete }}" == "true" && "${{ env.codeql_complete }}" == "true" ]]; then
              echo "All workflows complete!"
              exit 0
            fi
            echo "Dependencies not yet complete. Retrying in 60 seconds..."
            sleep 60
          done
          echo "Dependencies not met within the timeout period. Exiting."
          exit 1

      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js using nvm
      - name: Set up Node.js version from .nvmrc
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
          nvm install
          nvm use
          node -v
          npm -v

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker tags
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,enable=true,priority=200,prefix=,suffix=,value=${{ github.sha }}

      - name: Build and Push Docker Images
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
